var __defProp = Object.defineProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};

// site/viteUtils.tsx
import React from "file:///Users/sophia/code/owid/owid-grapher/node_modules/react/index.js";

// settings/findBaseDir.ts
import path from "path";
import fs from "fs";
function findProjectBaseDir(from) {
  if (!fs.existsSync) return void 0;
  let dir = path.dirname(from);
  while (dir.length) {
    if (fs.existsSync(path.resolve(dir, "package.json"))) return dir;
    const parentDir = path.resolve(dir, "..");
    if (parentDir === dir) break;
    else dir = parentDir;
  }
  return void 0;
}

// site/viteUtils.tsx
import fs3 from "file:///Users/sophia/code/owid/owid-grapher/node_modules/fs-extra/lib/index.js";

// settings/serverSettings.ts
import path2 from "path";
import dotenv2 from "file:///Users/sophia/code/owid/owid-grapher/node_modules/dotenv/lib/main.js";
import fs2 from "fs";
import ini from "file:///Users/sophia/code/owid/owid-grapher/node_modules/ini/lib/ini.js";
import os from "os";

// settings/clientSettings.ts
var clientSettings_exports = {};
__export(clientSettings_exports, {
  ADMIN_BASE_URL: () => ADMIN_BASE_URL,
  ADMIN_SERVER_HOST: () => ADMIN_SERVER_HOST,
  ADMIN_SERVER_PORT: () => ADMIN_SERVER_PORT,
  ALGOLIA_ID: () => ALGOLIA_ID,
  ALGOLIA_INDEX_PREFIX: () => ALGOLIA_INDEX_PREFIX,
  ALGOLIA_SEARCH_KEY: () => ALGOLIA_SEARCH_KEY,
  BAKED_BASE_URL: () => BAKED_BASE_URL,
  BAKED_GRAPHER_EXPORTS_BASE_URL: () => BAKED_GRAPHER_EXPORTS_BASE_URL,
  BAKED_GRAPHER_URL: () => BAKED_GRAPHER_URL,
  BAKED_SITE_EXPORTS_BASE_URL: () => BAKED_SITE_EXPORTS_BASE_URL,
  BUGSNAG_API_KEY: () => BUGSNAG_API_KEY,
  DATA_API_URL: () => DATA_API_URL,
  DONATE_API_URL: () => DONATE_API_URL,
  ENV: () => ENV,
  ETL_API_URL: () => ETL_API_URL,
  ETL_WIZARD_URL: () => ETL_WIZARD_URL,
  EXPLORER_DYNAMIC_THUMBNAIL_URL: () => EXPLORER_DYNAMIC_THUMBNAIL_URL,
  FEATURE_FLAGS: () => FEATURE_FLAGS,
  FeatureFlagFeature: () => FeatureFlagFeature,
  GDOCS_BASIC_ARTICLE_TEMPLATE_URL: () => GDOCS_BASIC_ARTICLE_TEMPLATE_URL,
  GDOCS_CLIENT_EMAIL: () => GDOCS_CLIENT_EMAIL,
  GDOCS_DETAILS_ON_DEMAND_ID: () => GDOCS_DETAILS_ON_DEMAND_ID,
  GOOGLE_TAG_MANAGER_ID: () => GOOGLE_TAG_MANAGER_ID,
  GRAPHER_DYNAMIC_CONFIG_URL: () => GRAPHER_DYNAMIC_CONFIG_URL,
  GRAPHER_DYNAMIC_THUMBNAIL_URL: () => GRAPHER_DYNAMIC_THUMBNAIL_URL,
  IMAGE_HOSTING_R2_BUCKET_PATH: () => IMAGE_HOSTING_R2_BUCKET_PATH,
  IMAGE_HOSTING_R2_BUCKET_SUBFOLDER_PATH: () => IMAGE_HOSTING_R2_BUCKET_SUBFOLDER_PATH,
  IMAGE_HOSTING_R2_CDN_URL: () => IMAGE_HOSTING_R2_CDN_URL,
  MULTI_DIM_DYNAMIC_CONFIG_URL: () => MULTI_DIM_DYNAMIC_CONFIG_URL,
  PUBLISHED_AT_FORMAT: () => PUBLISHED_AT_FORMAT,
  RECAPTCHA_SITE_KEY: () => RECAPTCHA_SITE_KEY,
  SENTRY_DSN: () => SENTRY_DSN,
  TOPICS_CONTENT_GRAPH: () => TOPICS_CONTENT_GRAPH
});
import dotenv from "file:///Users/sophia/code/owid/owid-grapher/node_modules/dotenv/lib/main.js";
import { parseIntOrUndefined } from "file:///Users/sophia/code/owid/owid-grapher/packages/@ourworldindata/utils/dist/index.js";
var __vite_injected_original_dirname2 = "/Users/sophia/code/owid/owid-grapher/settings";
if (typeof __vite_injected_original_dirname2 !== "undefined") {
  const baseDir2 = findProjectBaseDir(__vite_injected_original_dirname2);
  if (baseDir2) dotenv.config({ path: `${baseDir2}/.env` });
}
var ENV = process.env.ENV === "production" ? "production" : "development";
var BUGSNAG_API_KEY = process.env.BUGSNAG_API_KEY;
var SENTRY_DSN = process.env.SENTRY_DSN;
var ADMIN_SERVER_PORT = parseIntOrUndefined(process.env.ADMIN_SERVER_PORT) ?? 3030;
var ADMIN_SERVER_HOST = process.env.ADMIN_SERVER_HOST ?? "localhost";
var BAKED_BASE_URL = process.env.BAKED_BASE_URL ?? `http://${ADMIN_SERVER_HOST}:${ADMIN_SERVER_PORT}`;
var BAKED_GRAPHER_URL = process.env.BAKED_GRAPHER_URL ?? `${BAKED_BASE_URL}/grapher`;
var BAKED_GRAPHER_EXPORTS_BASE_URL = process.env.BAKED_GRAPHER_EXPORTS_BASE_URL ?? `${BAKED_GRAPHER_URL}/exports`;
var BAKED_SITE_EXPORTS_BASE_URL = process.env.BAKED_SITE_EXPORTS_BASE_URL ?? `${BAKED_BASE_URL}/exports`;
var GRAPHER_DYNAMIC_THUMBNAIL_URL = process.env.GRAPHER_DYNAMIC_THUMBNAIL_URL ?? `${BAKED_GRAPHER_URL}`;
var EXPLORER_DYNAMIC_THUMBNAIL_URL = process.env.EXPLORER_DYNAMIC_THUMBNAIL_URL ?? `${BAKED_BASE_URL}/explorers`;
var GRAPHER_DYNAMIC_CONFIG_URL = process.env.GRAPHER_DYNAMIC_CONFIG_URL ?? `${BAKED_GRAPHER_URL}`;
var MULTI_DIM_DYNAMIC_CONFIG_URL = process.env.MULTI_DIM_DYNAMIC_CONFIG_URL ?? `${BAKED_BASE_URL}/multi-dim`;
var ADMIN_BASE_URL = process.env.ADMIN_BASE_URL ?? `http://${ADMIN_SERVER_HOST}:${ADMIN_SERVER_PORT}`;
var DATA_API_URL = process.env.DATA_API_URL ?? "https://api.ourworldindata.org/v1/indicators/";
var ALGOLIA_ID = process.env.ALGOLIA_ID ?? "";
var ALGOLIA_SEARCH_KEY = process.env.ALGOLIA_SEARCH_KEY ?? "";
var ALGOLIA_INDEX_PREFIX = process.env.ALGOLIA_INDEX_PREFIX ?? "";
var DONATE_API_URL = process.env.DONATE_API_URL ?? "http://localhost:8788/donation/donate";
var RECAPTCHA_SITE_KEY = process.env.RECAPTCHA_SITE_KEY ?? "6LcJl5YUAAAAAATQ6F4vl9dAWRZeKPBm15MAZj4Q";
var GOOGLE_TAG_MANAGER_ID = process.env.GOOGLE_TAG_MANAGER_ID ?? "";
var TOPICS_CONTENT_GRAPH = process.env.TOPICS_CONTENT_GRAPH === "true";
var GDOCS_CLIENT_EMAIL = process.env.GDOCS_CLIENT_EMAIL ?? "";
var GDOCS_BASIC_ARTICLE_TEMPLATE_URL = process.env.GDOCS_BASIC_ARTICLE_TEMPLATE_URL ?? "";
var IMAGE_HOSTING_R2_CDN_URL = process.env.IMAGE_HOSTING_R2_CDN_URL || "";
var IMAGE_HOSTING_R2_BUCKET_PATH = process.env.IMAGE_HOSTING_R2_BUCKET_PATH || "";
var IMAGE_HOSTING_R2_BUCKET_SUBFOLDER_PATH = IMAGE_HOSTING_R2_BUCKET_PATH.slice(
  IMAGE_HOSTING_R2_BUCKET_PATH.indexOf("/") + 1
);
var ETL_WIZARD_URL = process.env.ETL_WIZARD_URL ?? `http://${ADMIN_SERVER_HOST}:8053/`;
var ETL_API_URL = process.env.ETL_API_URL ?? `http://${ADMIN_SERVER_HOST}:8081/api/v1`;
var GDOCS_DETAILS_ON_DEMAND_ID = process.env.GDOCS_DETAILS_ON_DEMAND_ID ?? "";
var PUBLISHED_AT_FORMAT = "ddd, MMM D, YYYY HH:mm";
var FeatureFlagFeature = /* @__PURE__ */ ((FeatureFlagFeature2) => {
  FeatureFlagFeature2["MultiDimDataPage"] = "MultiDimDataPage";
  return FeatureFlagFeature2;
})(FeatureFlagFeature || {});
var featureFlagsRaw = typeof process.env.FEATURE_FLAGS === "string" && process.env.FEATURE_FLAGS.trim()?.split(",") || [];
var FEATURE_FLAGS = new Set(
  Object.keys(FeatureFlagFeature).filter(
    (key) => featureFlagsRaw.includes(key)
  )
);

// settings/serverSettings.ts
import { parseIntOrUndefined as parseIntOrUndefined2 } from "file:///Users/sophia/code/owid/owid-grapher/packages/@ourworldindata/utils/dist/index.js";
var __vite_injected_original_dirname3 = "/Users/sophia/code/owid/owid-grapher/settings";
var baseDir = findProjectBaseDir(__vite_injected_original_dirname3);
if (baseDir === void 0) throw new Error("could not locate base package.json");
dotenv2.config({ path: `${baseDir}/.env` });
var serverSettings = process.env ?? {};
var BASE_DIR = baseDir;
var DATA_API_FOR_ADMIN_UI = serverSettings.DATA_API_FOR_ADMIN_UI;
var BAKED_BASE_URL2 = BAKED_BASE_URL;
var VITE_PREVIEW = serverSettings.VITE_PREVIEW === "true";
var ADMIN_BASE_URL2 = ADMIN_BASE_URL;
var BAKED_GRAPHER_URL2 = serverSettings.BAKED_GRAPHER_URL ?? `${BAKED_BASE_URL2}/grapher`;
var OPTIMIZE_SVG_EXPORTS = serverSettings.OPTIMIZE_SVG_EXPORTS === "true";
var GITHUB_USERNAME = serverSettings.GITHUB_USERNAME ?? "owid-test";
var GIT_DEFAULT_USERNAME = serverSettings.GIT_DEFAULT_USERNAME ?? "Our World in Data";
var GIT_DEFAULT_EMAIL = serverSettings.GIT_DEFAULT_EMAIL ?? "info@ourworldindata.org";
var BUGSNAG_API_KEY2 = serverSettings.BUGSNAG_API_KEY;
var BUGSNAG_NODE_API_KEY = serverSettings.BUGSNAG_NODE_API_KEY;
var BLOG_POSTS_PER_PAGE = parseIntOrUndefined2(serverSettings.BLOG_POSTS_PER_PAGE) ?? 21;
var BLOG_SLUG = serverSettings.BLOG_SLUG ?? "latest";
var GRAPHER_DB_NAME = serverSettings.GRAPHER_DB_NAME ?? "owid";
var GRAPHER_DB_USER = serverSettings.GRAPHER_DB_USER ?? "root";
var GRAPHER_DB_PASS = serverSettings.GRAPHER_DB_PASS ?? "";
var GRAPHER_DB_HOST = serverSettings.GRAPHER_DB_HOST ?? "localhost";
var GRAPHER_DB_PORT = parseIntOrUndefined2(serverSettings.GRAPHER_DB_PORT) ?? 3306;
var GRAPHER_TEST_DB_NAME = serverSettings.GRAPHER_TEST_DB_NAME ?? "owid";
var GRAPHER_TEST_DB_USER = serverSettings.GRAPHER_TEST_DB_USER ?? "root";
var GRAPHER_TEST_DB_PASS = serverSettings.GRAPHER_TEST_DB_PASS ?? "";
var GRAPHER_TEST_DB_HOST = serverSettings.GRAPHER_TEST_DB_HOST ?? "localhost";
var GRAPHER_TEST_DB_PORT = parseIntOrUndefined2(serverSettings.GRAPHER_TEST_DB_PORT) ?? 3306;
var BAKED_SITE_DIR = serverSettings.BAKED_SITE_DIR ?? path2.resolve(BASE_DIR, "bakedSite");
var SECRET_KEY = serverSettings.SECRET_KEY ?? "fejwiaof jewiafo jeioa fjieowajf isa fjidosajfgj";
var SESSION_COOKIE_AGE = parseIntOrUndefined2(serverSettings.SESSION_COOKIE_AGE) ?? 1209600;
var ALGOLIA_SECRET_KEY = serverSettings.ALGOLIA_SECRET_KEY ?? "";
var ALGOLIA_INDEXING = serverSettings.ALGOLIA_INDEXING === "true";
var HTTPS_ONLY = serverSettings.HTTPS_ONLY !== "false";
var GIT_DATASETS_DIR = serverSettings.GIT_DATASETS_DIR ?? `${BASE_DIR}/datasetsExport`;
var TMP_DIR = serverSettings.TMP_DIR ?? "/tmp";
var UNCATEGORIZED_TAG_ID = parseIntOrUndefined2(serverSettings.UNCATEGORIZED_TAG_ID) ?? 375;
var BAKE_ON_CHANGE = serverSettings.BAKE_ON_CHANGE === "true";
var DEPLOY_QUEUE_FILE_PATH = serverSettings.DEPLOY_QUEUE_FILE_PATH ?? `${BASE_DIR}/.queue`;
var DEPLOY_PENDING_FILE_PATH = serverSettings.DEPLOY_PENDING_FILE_PATH ?? `${BASE_DIR}/.pending`;
var CLOUDFLARE_AUD = serverSettings.CLOUDFLARE_AUD ?? "";
var CATALOG_PATH = serverSettings.CATALOG_PATH ?? "";
var GDOCS_PRIVATE_KEY = (serverSettings.GDOCS_PRIVATE_KEY ?? "").replaceAll('"', "").replaceAll("'", "");
var GDOCS_CLIENT_ID = serverSettings.GDOCS_CLIENT_ID ?? "";
var GDOCS_BACKPORTING_TARGET_FOLDER = serverSettings.GDOCS_BACKPORTING_TARGET_FOLDER ?? "";
var GDOCS_IMAGES_BACKPORTING_TARGET_FOLDER = serverSettings.GDOCS_IMAGES_BACKPORTING_TARGET_FOLDER ?? "";
var GDOCS_DONATE_FAQS_DOCUMENT_ID = serverSettings.GDOCS_DONATE_FAQS_DOCUMENT_ID ?? "194PNSFjgSlt9Zm5xYuDOF0l_GLKZbVxH2co3zCok_cE";
var GDOCS_SHARED_DRIVE_ID = serverSettings.GDOCS_SHARED_DRIVE_ID ?? "";
var GDOCS_DETAILS_ON_DEMAND_ID2 = serverSettings.GDOCS_DETAILS_ON_DEMAND_ID ?? "";
var rcloneConfig = {};
var rcloneConfigPath = path2.join(os.homedir(), ".config/rclone/rclone.conf");
if (fs2.existsSync(rcloneConfigPath)) {
  rcloneConfig = ini.parse(fs2.readFileSync(rcloneConfigPath, "utf-8"));
}
var IMAGE_HOSTING_R2_CDN_URL2 = serverSettings.IMAGE_HOSTING_R2_CDN_URL || "";
var IMAGE_HOSTING_R2_BUCKET_PATH2 = serverSettings.IMAGE_HOSTING_R2_BUCKET_PATH || "";
var IMAGE_HOSTING_R2_BUCKET_SUBFOLDER_PATH2 = IMAGE_HOSTING_R2_BUCKET_PATH2.slice(
  IMAGE_HOSTING_R2_BUCKET_PATH2.indexOf("/") + 1
);
var R2_ENDPOINT = serverSettings.R2_ENDPOINT || rcloneConfig["owid-r2"]?.endpoint || "https://078fcdfed9955087315dd86792e71a7e.r2.cloudflarestorage.com";
var R2_ACCESS_KEY_ID = serverSettings.R2_ACCESS_KEY_ID || rcloneConfig["owid-r2"]?.access_key_id || "";
var R2_SECRET_ACCESS_KEY = serverSettings.R2_SECRET_ACCESS_KEY || rcloneConfig["owid-r2"]?.secret_access_key || "";
var R2_REGION = serverSettings.R2_REGION || rcloneConfig["owid-r2"]?.region || "auto";
var GRAPHER_CONFIG_R2_BUCKET = serverSettings.GRAPHER_CONFIG_R2_BUCKET;
var GRAPHER_CONFIG_R2_BUCKET_PATH = serverSettings.GRAPHER_CONFIG_R2_BUCKET_PATH;
var BUILDKITE_API_ACCESS_TOKEN = serverSettings.BUILDKITE_API_ACCESS_TOKEN ?? "";
var BUILDKITE_DEPLOY_CONTENT_PIPELINE_SLUG = serverSettings.BUILDKITE_DEPLOY_CONTENT_PIPELINE_SLUG || "owid-deploy-content-master";
var BUILDKITE_BRANCH = serverSettings.BUILDKITE_BRANCH || "master";
var BUILDKITE_DEPLOY_CONTENT_SLACK_CHANNEL = serverSettings.BUILDKITE_DEPLOY_CONTENT_SLACK_CHANNEL || "C06EWA0DK4H";
var OPENAI_API_KEY = serverSettings.OPENAI_API_KEY ?? "";
var SLACK_BOT_OAUTH_TOKEN = serverSettings.SLACK_BOT_OAUTH_TOKEN ?? "";
var LEGACY_WORDPRESS_IMAGE_URL = serverSettings.LEGACY_WORDPRESS_IMAGE_URL ?? "https://assets.ourworldindata.org/uploads";
var ENV_IS_STAGING = ADMIN_BASE_URL2.includes(
  "http://staging-site"
);

// site/SiteConstants.ts
import { faRss } from "file:///Users/sophia/code/owid/owid-grapher/node_modules/@fortawesome/free-solid-svg-icons/index.mjs";
import {
  faXTwitter,
  faFacebookSquare,
  faInstagram,
  faThreads,
  faLinkedin,
  faBluesky
} from "file:///Users/sophia/code/owid/owid-grapher/node_modules/@fortawesome/free-brands-svg-icons/index.mjs";
var polyfillFeatures = [
  "es2021",
  // String.replaceAll, Promise.any, ...
  "es2022",
  // Array.at, String.at, ...
  "es2023",
  // Array.findLast, Array.toReversed, Array.toSorted, Array.with, ...
  "IntersectionObserver",
  "IntersectionObserverEntry"
];
var POLYFILL_VERSION = "4.8.0";
var POLYFILL_URL = `https://cdnjs.cloudflare.com/polyfill/v3/polyfill.min.js?version=${POLYFILL_VERSION}&features=${polyfillFeatures.join(
  ","
)}`;
var DATA_INSIGHTS_ATOM_FEED_NAME = "atom-data-insights.xml";
var DATA_INSIGHT_ATOM_FEED_PROPS = {
  title: "Atom feed for Daily Data Insights",
  href: `https://ourworldindata.org/${DATA_INSIGHTS_ATOM_FEED_NAME}`
};
var RSS_FEEDS = [
  {
    title: "Research & Writing RSS Feed",
    url: "/atom.xml",
    icon: faRss
  },
  {
    title: "Daily Data Insights RSS Feed",
    url: `/${DATA_INSIGHTS_ATOM_FEED_NAME}`,
    icon: faRss
  }
];

// site/viteUtils.tsx
import { sortBy } from "file:///Users/sophia/code/owid/owid-grapher/packages/@ourworldindata/utils/dist/index.js";
import urljoin from "file:///Users/sophia/code/owid/owid-grapher/node_modules/url-join/lib/url-join.js";
var VITE_DEV_URL = process.env.VITE_DEV_URL ?? "http://localhost:8090";
var VITE_ASSET_SITE_ENTRY = "site/owid.entry.ts";
var VITE_ASSET_ADMIN_ENTRY = "adminSiteClient/admin.entry.ts";
var VITE_ENTRYPOINT_INFO = {
  ["site" /* Site */]: {
    entryPointFile: VITE_ASSET_SITE_ENTRY,
    outDir: "assets",
    outName: "owid"
  },
  ["admin" /* Admin */]: {
    entryPointFile: VITE_ASSET_ADMIN_ENTRY,
    outDir: "assets-admin",
    outName: "admin"
  }
};

// vite.config-common.mts
import { defineConfig } from "file:///Users/sophia/code/owid/owid-grapher/node_modules/vite/dist/node/index.js";
import pluginReact from "file:///Users/sophia/code/owid/owid-grapher/node_modules/@vitejs/plugin-react/dist/index.mjs";
import pluginChecker from "file:///Users/sophia/code/owid/owid-grapher/node_modules/vite-plugin-checker/dist/esm/main.js";
var defineViteConfigForEntrypoint = (entrypoint) => {
  const entrypointInfo = VITE_ENTRYPOINT_INFO[entrypoint];
  return defineConfig({
    publicDir: false,
    // don't copy public folder to dist
    resolve: {
      // prettier-ignore
      alias: {
        "@ourworldindata/grapher/src": "@ourworldindata/grapher/src",
        // need this for imports of @ourworldindata/grapher/src/core/grapher.scss to work
        // we alias to the packages source files in dev and prod:
        // this means we get instant dev updates when we change one of them,
        // and the prod build builds them all as esm modules, which helps with tree shaking
        // Idea from https://github.com/LinusBorg/vue-lib-template/blob/3775e49b20a7c3349dd49321cad2ed7f9d575057/packages/playground/vite.config.ts
        "@ourworldindata/components": "@ourworldindata/components/src/index.ts",
        "@ourworldindata/core-table": "@ourworldindata/core-table/src/index.ts",
        "@ourworldindata/explorer": "@ourworldindata/explorer/src/index.ts",
        "@ourworldindata/grapher": "@ourworldindata/grapher/src/index.ts",
        "@ourworldindata/types": "@ourworldindata/types/src/index.ts",
        "@ourworldindata/utils": "@ourworldindata/utils/src/index.ts"
      }
    },
    css: {
      devSourcemap: true
    },
    define: {
      // Replace all clientSettings with their respective values, i.e. assign e.g. BUGSNAG_API_KEY to process.env.BUGSNAG_API_KEY
      // it's important to note that we only expose values that are present in the clientSettings file - not any other things that are stored in .env
      ...Object.fromEntries(
        Object.entries(clientSettings_exports).map(([key, value]) => [
          `process.env.${key}`,
          JSON.stringify(value)
        ])
      )
    },
    build: {
      manifest: true,
      // creates a manifest.json file, which we use to determine which files to load in prod
      emptyOutDir: true,
      outDir: `dist/${entrypointInfo.outDir}`,
      sourcemap: true,
      target: ["chrome80", "firefox78", "safari13.1"],
      // see docs/browser-support.md
      rollupOptions: {
        input: {
          [entrypointInfo.outName]: entrypointInfo.entryPointFile
        },
        output: {
          assetFileNames: `${entrypointInfo.outName}.css`,
          entryFileNames: `${entrypointInfo.outName}.mjs`
        }
      }
    },
    plugins: [
      pluginReact({
        babel: {
          parserOpts: {
            plugins: ["decorators-legacy"]
            // needed so mobx decorators work correctly
          }
        }
      }),
      pluginChecker({
        typescript: {
          buildMode: true,
          tsconfigPath: "tsconfig.vite-checker.json"
        }
      })
    ],
    server: {
      port: 8090,
      warmup: { clientFiles: [VITE_ASSET_SITE_ENTRY] }
    },
    preview: {
      port: 8090
    }
  });
};

// vite.config-site.mts
var vite_config_site_default = defineViteConfigForEntrypoint("site" /* Site */);
export {
  vite_config_site_default as default
};
//# sourceMappingURL=data:application/json;base64,
